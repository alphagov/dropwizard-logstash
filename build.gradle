plugins {
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
}
apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'io.github.gradle-nexus.publish-plugin'

repositories {
    mavenCentral()
}

def dependencyVersions = [
        dropwizard: '2.1.3'
]

group 'uk.gov.ida'
version "$dependencyVersions.dropwizard-${System.env.BUILD_NUMBER ?: 'SNAPSHOT'}"

java {
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    implementation "io.dropwizard:dropwizard-core:$dependencyVersions.dropwizard"

    api 'net.logstash.logback:logstash-logback-encoder:4.11',
            'ch.qos.logback:logback-access:1.2.3'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1',
            'org.hamcrest:hamcrest-library:2.2',
            'org.mockito:mockito-core:3.2.0',
            'com.github.stefanbirkner:system-rules:1.16.1',
            "io.dropwizard:dropwizard-testing:$dependencyVersions.dropwizard",
            'org.assertj:assertj-core:3.19.0'
}

sourceSets {
    java9 {
        if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
            java {
                srcDir 'src/main/java9'
            }
        }
    }
    java10 {
        if (JavaVersion.current() >= JavaVersion.VERSION_1_10) {
            java {
                srcDir 'src/main/java10'
            }
        }
    }
    java11 {
        if (JavaVersion.current() >= JavaVersion.VERSION_11) {
            java {
                srcDir 'src/main/java11'
            }
        }
    }
}

compileJava {
    if(JavaVersion.current() >= JavaVersion.VERSION_1_9) {
        options.compilerArgs.addAll(['--release', '8'])
    }
}

compileJava9Java {
    if(JavaVersion.current() >= JavaVersion.VERSION_1_9) {
        options.compilerArgs.addAll(['--release', '9'])
    }
}

compileJava10Java {
    if(JavaVersion.current() >= JavaVersion.VERSION_1_10) {
        options.compilerArgs.addAll(['--release', '10'])
    }
}

compileJava11Java {
    if(JavaVersion.current() >= JavaVersion.VERSION_11) {
        options.compilerArgs.addAll(['--release', '11'])
    }
}

test {
    testLogging {
        events "skipped", "failed", "standardError"
        showCauses true
        showExceptions true
        showStackTraces true
        exceptionFormat "full"

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

task sourceJar(type: Jar) {
    archiveClassifier = "sources"
    from sourceSets.main.allJava
}

jar {
    into('META-INF/versions/9') {
        from sourceSets.java9.output
    }
    into('META-INF/versions/10') {
        from sourceSets.java10.output
    }
    into('META-INF/versions/11') {
        from sourceSets.java11.output
    }
    manifest {
        if(JavaVersion.current() >= JavaVersion.VERSION_1_9) {
            attributes.put("Multi-Release", "true")
        }
    }
}

nexusPublishing {
    useStaging = true
    repositories {
        sonatype {
            // because we registered in Sonatype after 24 Feb 2021, we provide these URIs
            // see: https://github.com/gradle-nexus/publish-plugin/blob/master/README.md
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = System.getenv("SONATYPE_USERNAME")
            password = System.getenv("SONATYPE_PASSWORD")
        }
    }
}

signing {
    useInMemoryPgpKeys(
            System.getenv("MAVEN_CENTRAL_SIGNING_KEY"),
            System.getenv("MAVEN_CENTRAL_SIGNING_KEY_PASSWORD")
    )
    sign publishing.publications
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Dropwizard logstash'
                packaging = 'jar'
                description = 'Dropwizard extension that supports logstash format with various appenders'
                url = 'https://github.com/alphagov/dropwizard-logstash'
                artifactId = 'dropwizard-logstash'

                scm {
                    url = 'https://github.com/alphagov/dropwizard-logstash'
                    connection = 'scm:git:git://github.com/alphagov/dropwizard-logstash.git'
                    developerConnection = 'scm:git:ssh://git@github.com:alphagov/dropwizard-logstash.git'
                }

                licenses {
                    license {
                        name = 'MIT Licence'
                        url = 'https://github.com/alphagov/dropwizard-logstash/blob/master/LICENCE'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        name = 'GDS Developers'
                    }
                }
            } // pom
        }
    }
}

idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
    }
    module {
        //if you love browsing Javadoc
        downloadJavadoc = true

        //and hate reading sources :)
        downloadSources = true
    }
}
